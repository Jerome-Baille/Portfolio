{"version":3,"file":"static/js/232.041a251a.chunk.js","mappings":"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","sources":["components/CustomCard.jsx","features/Certifications/CertificationsPresentation.jsx","features/Certifications/CertificationsContainer.js"],"sourcesContent":["import * as React from 'react';\r\nimport Card from '@mui/material/Card';\r\nimport CardHeader from '@mui/material/CardHeader';\r\nimport CardActions from '@mui/material/CardActions';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nimport Box from '@mui/material/Box';\r\nimport Modal from '@mui/material/Modal';\r\n\r\nconst style = {\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: 400,\r\n    bgcolor: 'background.paper',\r\n    border: '2px solid #000',\r\n    borderRadius: 4,\r\n    boxShadow: 24,\r\n    p: 4,\r\n  };\r\n\r\nconst borderColor = (status) => {\r\n    switch (status) {\r\n        case 'completed':\r\n            return '#bfe3b4';\r\n        case 'inProgress':\r\n            return '#BEBEBE';\r\n        case 'planned':\r\n            return '#967bb6';\r\n        default:\r\n            return '$primary-color';\r\n    }\r\n}\r\n\r\nconst CustomCard = ({ \r\n    dataCardGeneric,\r\n    dataCardLocale,\r\n    modal\r\n }) => {\r\n    const [open, setOpen] = React.useState(false);\r\n    const handleOpen = () => setOpen(true);\r\n    const handleClose = () => setOpen(false);\r\n    \r\n    return (\r\n        <>\r\n            <Card\r\n                sx={{ \r\n                    border: '5px solid', \r\n                    borderColor: borderColor(dataCardGeneric.status),\r\n                    boxShadow: '0 2px 4px rgba(0, 0, 0, 0.16)',\r\n                    transition: 'box-shadow 0.2s ease-in-out',\r\n                    '&:hover': {\r\n                        boxShadow: '0 4px 8px rgba(0, 0, 0, 0.24)'\r\n                    }\r\n                }}\r\n            >\r\n                <CardHeader\r\n                    sx={{ height: '95px' }}\r\n                    avatar={\r\n                    <Avatar sx={{ bgcolor: 'transparent' }} aria-label=\"recipe\">\r\n                        <img src={process.env.PUBLIC_URL + dataCardGeneric.img} alt={`${dataCardLocale.name} by ${dataCardGeneric.author}`} />\r\n                    </Avatar>\r\n                    }\r\n                    title={dataCardLocale.name}\r\n                    subheader={dataCardLocale.type}\r\n                />\r\n                <CardActions\r\n                    sx={{ display: 'flex', justifyContent: 'space-between' }}\r\n                >\r\n                    <Button \r\n                        size=\"small\"\r\n                        href={dataCardGeneric.url}\r\n                        target=\"_blank\" \r\n                        rel=\"noopener noreferrer\" \r\n                    >\r\n                        Link\r\n                    </Button>\r\n                    <Button \r\n                        onClick={handleOpen}\r\n                    >\r\n                        See details\r\n                    </Button>\r\n                </CardActions>\r\n            </Card>\r\n\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"modal-modal-title\"\r\n                aria-describedby=\"modal-modal-description\"\r\n            >\r\n                <Box sx={style}>\r\n                    <h2>\r\n                        {dataCardLocale.name}\r\n                    </h2>\r\n                    <Typography id=\"modal-modal-description\" sx={{ mt: 5 }}>\r\n                        <span className='accent-color'>{modal.author} : </span>\r\n                        {dataCardGeneric.author}\r\n                    </Typography>\r\n                    <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n                        <span className='accent-color'>{modal.type} : </span> \r\n                        {dataCardLocale.type}\r\n                    </Typography>\r\n                    <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n                        <span className='accent-color'>{modal.content} :</span>\r\n                        <br/>\r\n                        {dataCardLocale.descriptions.split('\\n').map((sentence, idx) => (\r\n                                <span key={idx}>\r\n                                    <span className='accent-color'>{idx+1} - </span>{sentence}<br/>\r\n                                </span>\r\n                            ))\r\n                        }\r\n                    </Typography>\r\n                    <Typography id=\"modal-modal-description\" sx={{ mt: 2 }}>\r\n                        <span className='accent-color'>{modal.source} :</span>\r\n                        <br/> \r\n                        <a \r\n                            href={dataCardGeneric.url}\r\n                            target=\"_blank\"\r\n                            rel=\"noopener noreferrer\"\r\n                        >\r\n                            {dataCardGeneric.url}\r\n                        </a>\r\n                    </Typography>\r\n                    <button \r\n                        className='flat-button'\r\n                        onClick={handleClose}\r\n                    >\r\n                        {modal.close}\r\n                    </button>\r\n                </Box>\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CustomCard;","import React, { useEffect, useRef, useState } from 'react';\r\n\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Select from '@mui/material/Select';\r\n\r\nimport CustomCard from '../../components/CustomCard';\r\n\r\nimport './certifications.scss';\r\n\r\nconst CertificationsPresentation = ({ \r\n    certificationsDataGeneric, \r\n    certificationsDataLocale,\r\n    onSelectOption\r\n}) => {\r\n    const [selectedOption, setSelectedOption] = useState('');\r\n    const componentRef = useRef(null);\r\n\r\n    const handleSelectChange = (event) => {\r\n        const option = event.target.value;\r\n        setSelectedOption(option);\r\n        onSelectOption(option);\r\n      };\r\n\r\n    useEffect(() => {\r\n        const observer = new IntersectionObserver(entries => {\r\n            entries.forEach(entry => {\r\n                if (entry.isIntersecting) {\r\n                    componentRef.current.classList.add('animate');\r\n                } \r\n            });\r\n        });\r\n        observer.observe(componentRef.current);\r\n\r\n        return () => observer.disconnect();\r\n    }, []);\r\n\r\n    return (\r\n        <div className='container' ref={componentRef}>\r\n            <section className='certifications__section inside-container'>\r\n                <h1>\r\n                    {certificationsDataLocale.title}\r\n                </h1>\r\n                <p>\r\n                    {certificationsDataLocale.subtitle}\r\n                </p>\r\n\r\n                <FormControl \r\n                    sx={{ \r\n                        minWidth: 250,\r\n                    }}\r\n                >\r\n                    <InputLabel id=\"select-certifications-label\">\r\n                        {certificationsDataLocale.filters.label}\r\n                    </InputLabel>\r\n                    <Select\r\n                        labelId=\"select-certifications-label\"\r\n                        id=\"select-certifications\"\r\n                        value={selectedOption}\r\n                        label={certificationsDataLocale.filters.label}\r\n                        onChange={handleSelectChange}\r\n                        MenuProps={{\r\n                            disableScrollLock: true,\r\n                          }}\r\n                    >\r\n                        {Object.entries(certificationsDataLocale.filters.type).map(([key, value]) => (\r\n                            <MenuItem key={key} value={key}>\r\n                                {value}\r\n                            </MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </FormControl>\r\n\r\n                <div className=\"certifications__cards\">\r\n                    {Object.keys(certificationsDataGeneric).map((certification, index) => (\r\n                        <CustomCard \r\n                            key={index}\r\n                            dataCardGeneric={certificationsDataGeneric[certification]}\r\n                            dataCardLocale={certificationsDataLocale[certification]}\r\n                            modal={certificationsDataLocale.modal}\r\n                        />\r\n                    ))}\r\n                </div>\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CertificationsPresentation;","import { useContext, useEffect, useState } from 'react';\r\nimport Loader from 'react-loaders'\r\nimport CertificationsPresentation from './CertificationsPresentation';\r\nimport certificationsList from '../../assets/certificationsList.json';\r\nimport en from '../../locales/en.json';\r\nimport fr from '../../locales/fr.json';\r\nimport { LanguageContext } from '../Layout/MainLayout';\r\n\r\nconst CertificationsContainer = () => {\r\n    const { language } = useContext(LanguageContext);\r\n    const [certificationsDataLocale, setCertificationsDataLocale] = useState({});\r\n    const [certificationsDataGeneric, setCertificationsDataGeneric] = useState({});\r\n\r\n    useEffect(() => {\r\n        setCertificationsDataLocale(language === 'fr' ? fr.certifications : en.certifications);\r\n        setCertificationsDataGeneric(certificationsList);\r\n    }, [language, certificationsDataLocale]);\r\n\r\n    const handleSelectedOption = (option) => {\r\n        if (option.toLowerCase() === \"all\") {\r\n            setCertificationsDataGeneric(certificationsList);\r\n        } else {\r\n            const filteredCertifications = {};\r\n            for (const [key, value] of Object.entries(certificationsList)) {\r\n                if (value.status.toLowerCase() === option.toLowerCase()) {\r\n                    filteredCertifications[key] = value;\r\n                }\r\n            }\r\n            setCertificationsDataGeneric(filteredCertifications);\r\n        }\r\n    };      \r\n\r\n    if(!Object.keys(certificationsDataLocale).length || !Object.keys(certificationsDataGeneric).length) {\r\n        return <Loader type=\"pacman\" />\r\n    }\r\n\r\n    return (\r\n        <CertificationsPresentation \r\n            certificationsDataGeneric={certificationsDataGeneric} \r\n            certificationsDataLocale={certificationsDataLocale}\r\n            onSelectOption={handleSelectedOption}\r\n        />\r\n    );\r\n}\r\n\r\nexport default CertificationsContainer;"],"names":["style","position","top","left","transform","width","bgcolor","border","borderRadius","boxShadow","p","borderColor","status","dataCardGeneric","dataCardLocale","modal","React","open","setOpen","handleClose","Card","sx","transition","CardHeader","height","avatar","Avatar","src","process","img","alt","name","author","title","subheader","type","CardActions","display","justifyContent","Button","size","href","url","target","rel","onClick","Modal","onClose","Box","Typography","id","mt","className","content","descriptions","split","map","sentence","idx","source","close","certificationsDataGeneric","certificationsDataLocale","onSelectOption","useState","selectedOption","setSelectedOption","componentRef","useRef","useEffect","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","current","classList","add","observe","disconnect","ref","subtitle","FormControl","minWidth","InputLabel","filters","label","Select","labelId","value","onChange","event","option","MenuProps","disableScrollLock","Object","key","MenuItem","keys","certification","index","language","useContext","LanguageContext","setCertificationsDataLocale","setCertificationsDataGeneric","fr","en","certificationsList","length","toLowerCase","filteredCertifications"],"sourceRoot":""}