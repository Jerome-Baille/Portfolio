{"version":3,"file":"static/js/397.0e7dd7da.chunk.js","mappings":"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","sources":["components/CustomForm.jsx","features/Contact/ContactForm/ContactFormContainer.js","features/Contact/ContactPresentation.jsx","features/Contact/ContactContainer.js"],"sourcesContent":["import React from 'react';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { TextField } from '@mui/material';\r\n\r\nconst CustomForm = ({ formData, onSubmit }) => {\r\n    const initialValues = {};\r\n    const validationSchemaFields = {};\r\n\r\n    // loop through formData.inputs to create initialValues and validationSchemaFields\r\n    Object.keys(formData.inputs).forEach((key) => {\r\n        const input = formData.inputs[key];\r\n        initialValues[key] = '';\r\n        let validationSchema = Yup.string().required(input.required);\r\n\r\n        if (input.type === 'email') {\r\n        validationSchema = validationSchema.email(input.invalid);\r\n        } \r\n\r\n        validationSchemaFields[key] = validationSchema;\r\n    });\r\n\r\n    const handleSubmit = (values, {resetForm}) => {\r\n        resetForm();\r\n        onSubmit(values);\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={initialValues}\r\n            onSubmit={handleSubmit}\r\n            validationSchema={Yup.object().shape(validationSchemaFields)}\r\n        >\r\n        {({ isSubmitting, isValid, dirty }) => (\r\n            <Form>\r\n                {Object.keys(formData.inputs).map((key, index) => {\r\n                    const input = formData.inputs[key];\r\n                    return (\r\n                        <Field key={key} name={key}>\r\n                            {({ field, meta }) => (\r\n                                <TextField\r\n                                    sx={{ \r\n                                        '& .MuiOutlinedInput-root': {\r\n                                            '& fieldset': {\r\n                                              borderColor: '#335384',\r\n                                            },\r\n                                            '& input:valid + fieldset': {\r\n                                              borderColor: 'green',\r\n                                              borderWidth: 2,\r\n                                            }\r\n                                          },\r\n                                    }}\r\n                                    id={key}\r\n                                    label={input.label}\r\n                                    type={input.type}\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    margin=\"normal\"\r\n                                    multiline={input.type === 'textarea'}\r\n                                    rows={input.type === 'textarea' ? 5 : 1}\r\n                                    {...field}\r\n                                    error={meta.touched && !!meta.error}\r\n                                    helperText={meta.touched && meta.error}\r\n                                />\r\n                            )}\r\n                        </Field>\r\n                    );\r\n                })}\r\n                <button\r\n                    className='flat-button'\r\n                    type=\"submit\"\r\n                    disabled={isSubmitting || !isValid || !dirty } \r\n                >\r\n                    {formData.btnContact}\r\n                </button>\r\n            </Form>\r\n        )}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default CustomForm;","import React, { useState } from 'react';\r\nimport emailjs from '@emailjs/browser'\r\nimport ContactForm from '../../../components/CustomForm'\r\nimport Alert from '@mui/material/Alert';\r\nimport AlertTitle from '@mui/material/AlertTitle';\r\nimport Snackbar from '@mui/material/Snackbar';\r\n\r\nconst ContactFormContainer = ({ formData }) => {\r\n    const [showAlert, setShowAlert] = useState(false);\r\n    const [state, setState] = useState({\r\n        open: false,\r\n        vertical: 'top',\r\n        horizontal: 'center',\r\n        type: 'success'\r\n      });\r\n    const { vertical, horizontal, open, type } = state;\r\n    \r\n    const toggleToast = (type) => {\r\n        setState({ ...state, open: !open, type });\r\n        setShowAlert(!showAlert);\r\n    };\r\n\r\n    const handleFormSubmit = (values) => {\r\n        emailjs\r\n        .send(\r\n            'service_pn9jjpq',\r\n            'template_396vp3p',\r\n            values,\r\n            'qB7TpUDmabvmgndWA'\r\n        )\r\n        .then(\r\n            () => {\r\n                toggleToast('success');\r\n            },\r\n            () => {\r\n                toggleToast('error');\r\n            }\r\n        )\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {showAlert && (\r\n                <Snackbar \r\n                    anchorOrigin={{ vertical, horizontal }}\r\n                    open={open} \r\n                    autoHideDuration={4000} \r\n                    onClose={toggleToast}\r\n                    key={{ vertical, horizontal }}\r\n                >\r\n                    <Alert  \r\n                        onClose={toggleToast} \r\n                        severity={type} \r\n                        sx={{ width: '100%' }}\r\n                    >\r\n                        <AlertTitle>{type === 'success' ? formData.toast.success.title : formData.toast.error.title}</AlertTitle>\r\n                        {type === 'success' ? formData.toast.success.message : formData.toast.error.message}\r\n                    </Alert>\r\n                </Snackbar>\r\n            )}\r\n            <ContactForm \r\n                formData={formData} \r\n                onSubmit={handleFormSubmit}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ContactFormContainer","import React, { useEffect, useRef } from 'react';\r\nimport ContactFormContainer from './ContactForm/ContactFormContainer';\r\n\r\nimport './contact.scss';\r\n\r\nconst ContactPresentation = ({ \r\n    contactData: { title, subtitle, form },\r\n    onSubmit\r\n}) => {\r\n    const componentRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const observer = new IntersectionObserver(entries => {\r\n            entries.forEach(entry => {\r\n                if (entry.isIntersecting) {\r\n                    componentRef.current.classList.add('animate');\r\n                } \r\n            });\r\n        });\r\n        observer.observe(componentRef.current);\r\n\r\n        return () => observer.disconnect();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"container\" ref={componentRef}>\r\n            <section className=\"contact__section inside-container\">\r\n                <header className='contact__header'>\r\n                    <h1>\r\n                        {title}\r\n                    </h1>\r\n                    <p>\r\n                        {subtitle}\r\n                    </p>\r\n                </header>\r\n\r\n                <section\r\n                    className='contact__section__form-animation'\r\n                >\r\n                    <ContactFormContainer \r\n                        formData={form} \r\n                        onSubmit={onSubmit}\r\n                    />\r\n                </section>\r\n            </section>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ContactPresentation;","import { useEffect, useState, useContext } from 'react'\r\nimport Loader from 'react-loaders'\r\n\r\nimport en from '../../locales/en.json'\r\nimport fr from '../../locales/fr.json'\r\n\r\nimport ContactPresentation from './ContactPresentation'\r\nimport { LanguageContext } from '../Layout/MainLayout';\r\n\r\nconst ContactContainer = () => {\r\n  const [contactData, setContactData] = useState({});\r\n  const { language } = useContext(LanguageContext);\r\n\r\n  useEffect(() => {\r\n    if (contactData[language]) {\r\n      return;\r\n    }\r\n    language === 'fr' ? setContactData(fr.contact) : setContactData(en.contact);\r\n  }, [language, contactData, setContactData])\r\n\r\n\r\n\r\n  if(!Object.keys(contactData).length) {\r\n    return <Loader type=\"pacman\" />\r\n  } \r\n\r\n  return (\r\n    <ContactPresentation \r\n        contactData={contactData} \r\n    />\r\n  )\r\n}\r\n\r\nexport default ContactContainer;\r\n"],"names":["formData","onSubmit","initialValues","validationSchemaFields","Object","keys","inputs","forEach","key","input","validationSchema","Yup","required","type","email","invalid","values","resetForm","shape","isSubmitting","isValid","dirty","map","index","name","field","meta","TextField","sx","borderColor","borderWidth","id","label","variant","fullWidth","margin","multiline","rows","error","touched","helperText","className","disabled","btnContact","useState","showAlert","setShowAlert","open","vertical","horizontal","state","setState","toggleToast","Snackbar","anchorOrigin","autoHideDuration","onClose","Alert","severity","width","AlertTitle","toast","success","title","message","emailjs","then","contactData","subtitle","form","componentRef","useRef","useEffect","observer","IntersectionObserver","entries","entry","isIntersecting","current","classList","add","observe","disconnect","ref","setContactData","language","useContext","LanguageContext","fr","en","length"],"sourceRoot":""}